// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CRASHREQ_PAXOS_SGX_CRASH_H_
#define FLATBUFFERS_GENERATED_CRASHREQ_PAXOS_SGX_CRASH_H_

#include "flatbuffers/flatbuffers.h"

#include "crash_generated.h"

namespace paxos_sgx {
namespace crash {

struct ClientFastGetArgs;
struct ClientFastGetArgsBuilder;

struct OperationArgs;
struct OperationArgsBuilder;

struct ReplicaFastGetArgs;
struct ReplicaFastGetArgsBuilder;

struct ReplicaProposeArgs;
struct ReplicaProposeArgsBuilder;

struct ReplicaAcceptArgs;
struct ReplicaAcceptArgsBuilder;

struct PingArgs;
struct PingArgsBuilder;

struct CloseArgs;
struct CloseArgsBuilder;

struct ResetArgs;
struct ResetArgsBuilder;

struct BasicRequest;
struct BasicRequestBuilder;

enum ReqArgs {
    ReqArgs_NONE = 0,
    ReqArgs_ClientFastGetArgs = 1,
    ReqArgs_OperationArgs = 2,
    ReqArgs_ReplicaFastGetArgs = 3,
    ReqArgs_ReplicaProposeArgs = 4,
    ReqArgs_ReplicaAcceptArgs = 5,
    ReqArgs_PingArgs = 6,
    ReqArgs_CloseArgs = 7,
    ReqArgs_ResetArgs = 8,
    ReqArgs_MIN = ReqArgs_NONE,
    ReqArgs_MAX = ReqArgs_ResetArgs
};

inline const ReqArgs (&EnumValuesReqArgs())[9] {
    static const ReqArgs values[] = {ReqArgs_NONE,
                                     ReqArgs_ClientFastGetArgs,
                                     ReqArgs_OperationArgs,
                                     ReqArgs_ReplicaFastGetArgs,
                                     ReqArgs_ReplicaProposeArgs,
                                     ReqArgs_ReplicaAcceptArgs,
                                     ReqArgs_PingArgs,
                                     ReqArgs_CloseArgs,
                                     ReqArgs_ResetArgs};
    return values;
}

inline const char *const *EnumNamesReqArgs() {
    static const char *const names[10] = {"NONE",
                                          "ClientFastGetArgs",
                                          "OperationArgs",
                                          "ReplicaFastGetArgs",
                                          "ReplicaProposeArgs",
                                          "ReplicaAcceptArgs",
                                          "PingArgs",
                                          "CloseArgs",
                                          "ResetArgs",
                                          nullptr};
    return names;
}

inline const char *EnumNameReqArgs(ReqArgs e) {
    if (flatbuffers::IsOutRange(e, ReqArgs_NONE, ReqArgs_ResetArgs)) return "";
    const size_t index = static_cast<size_t>(e);
    return EnumNamesReqArgs()[index];
}

template <typename T>
struct ReqArgsTraits {
    static const ReqArgs enum_value = ReqArgs_NONE;
};

template <>
struct ReqArgsTraits<paxos_sgx::crash::ClientFastGetArgs> {
    static const ReqArgs enum_value = ReqArgs_ClientFastGetArgs;
};

template <>
struct ReqArgsTraits<paxos_sgx::crash::OperationArgs> {
    static const ReqArgs enum_value = ReqArgs_OperationArgs;
};

template <>
struct ReqArgsTraits<paxos_sgx::crash::ReplicaFastGetArgs> {
    static const ReqArgs enum_value = ReqArgs_ReplicaFastGetArgs;
};

template <>
struct ReqArgsTraits<paxos_sgx::crash::ReplicaProposeArgs> {
    static const ReqArgs enum_value = ReqArgs_ReplicaProposeArgs;
};

template <>
struct ReqArgsTraits<paxos_sgx::crash::ReplicaAcceptArgs> {
    static const ReqArgs enum_value = ReqArgs_ReplicaAcceptArgs;
};

template <>
struct ReqArgsTraits<paxos_sgx::crash::PingArgs> {
    static const ReqArgs enum_value = ReqArgs_PingArgs;
};

template <>
struct ReqArgsTraits<paxos_sgx::crash::CloseArgs> {
    static const ReqArgs enum_value = ReqArgs_CloseArgs;
};

template <>
struct ReqArgsTraits<paxos_sgx::crash::ResetArgs> {
    static const ReqArgs enum_value = ReqArgs_ResetArgs;
};

bool VerifyReqArgs(flatbuffers::Verifier &verifier, const void *obj,
                   ReqArgs type);
bool VerifyReqArgsVector(
    flatbuffers::Verifier &verifier,
    const flatbuffers::Vector<flatbuffers::Offset<void>> *values,
    const flatbuffers::Vector<uint8_t> *types);

struct ClientFastGetArgs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    typedef ClientFastGetArgsBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
        VT_ACCOUNT = 4
    };
    int64_t account() const { return GetField<int64_t>(VT_ACCOUNT, 0); }
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) &&
               VerifyField<int64_t>(verifier, VT_ACCOUNT) &&
               verifier.EndTable();
    }
};

struct ClientFastGetArgsBuilder {
    typedef ClientFastGetArgs Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_account(int64_t account) {
        fbb_.AddElement<int64_t>(ClientFastGetArgs::VT_ACCOUNT, account, 0);
    }
    explicit ClientFastGetArgsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    ClientFastGetArgsBuilder &operator=(const ClientFastGetArgsBuilder &);
    flatbuffers::Offset<ClientFastGetArgs> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<ClientFastGetArgs>(end);
        return o;
    }
};

inline flatbuffers::Offset<ClientFastGetArgs> CreateClientFastGetArgs(
    flatbuffers::FlatBufferBuilder &_fbb, int64_t account = 0) {
    ClientFastGetArgsBuilder builder_(_fbb);
    builder_.add_account(account);
    return builder_.Finish();
}

struct OperationArgs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    typedef OperationArgsBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
        VT_ACCOUNT = 4,
        VT_TO = 6,
        VT_AMOUNT = 8
    };
    int64_t account() const { return GetField<int64_t>(VT_ACCOUNT, 0); }
    int64_t to() const { return GetField<int64_t>(VT_TO, 0); }
    int64_t amount() const { return GetField<int64_t>(VT_AMOUNT, 0); }
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) &&
               VerifyField<int64_t>(verifier, VT_ACCOUNT) &&
               VerifyField<int64_t>(verifier, VT_TO) &&
               VerifyField<int64_t>(verifier, VT_AMOUNT) && verifier.EndTable();
    }
};

struct OperationArgsBuilder {
    typedef OperationArgs Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_account(int64_t account) {
        fbb_.AddElement<int64_t>(OperationArgs::VT_ACCOUNT, account, 0);
    }
    void add_to(int64_t to) {
        fbb_.AddElement<int64_t>(OperationArgs::VT_TO, to, 0);
    }
    void add_amount(int64_t amount) {
        fbb_.AddElement<int64_t>(OperationArgs::VT_AMOUNT, amount, 0);
    }
    explicit OperationArgsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    OperationArgsBuilder &operator=(const OperationArgsBuilder &);
    flatbuffers::Offset<OperationArgs> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<OperationArgs>(end);
        return o;
    }
};

inline flatbuffers::Offset<OperationArgs> CreateOperationArgs(
    flatbuffers::FlatBufferBuilder &_fbb, int64_t account = 0, int64_t to = 0,
    int64_t amount = 0) {
    OperationArgsBuilder builder_(_fbb);
    builder_.add_amount(amount);
    builder_.add_to(to);
    builder_.add_account(account);
    return builder_.Finish();
}

struct ReplicaFastGetArgs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    typedef ReplicaFastGetArgsBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
        VT_ACCOUNT = 4
    };
    int64_t account() const { return GetField<int64_t>(VT_ACCOUNT, 0); }
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) &&
               VerifyField<int64_t>(verifier, VT_ACCOUNT) &&
               verifier.EndTable();
    }
};

struct ReplicaFastGetArgsBuilder {
    typedef ReplicaFastGetArgs Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_account(int64_t account) {
        fbb_.AddElement<int64_t>(ReplicaFastGetArgs::VT_ACCOUNT, account, 0);
    }
    explicit ReplicaFastGetArgsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    ReplicaFastGetArgsBuilder &operator=(const ReplicaFastGetArgsBuilder &);
    flatbuffers::Offset<ReplicaFastGetArgs> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<ReplicaFastGetArgs>(end);
        return o;
    }
};

inline flatbuffers::Offset<ReplicaFastGetArgs> CreateReplicaFastGetArgs(
    flatbuffers::FlatBufferBuilder &_fbb, int64_t account = 0) {
    ReplicaFastGetArgsBuilder builder_(_fbb);
    builder_.add_account(account);
    return builder_.Finish();
}

struct ReplicaProposeArgs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    typedef ReplicaProposeArgsBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
        VT_OPERATION_ARGS = 4,
        VT_SLOT_NUMBER = 6
    };
    const paxos_sgx::crash::OperationArgs *operation_args() const {
        return GetPointer<const paxos_sgx::crash::OperationArgs *>(
            VT_OPERATION_ARGS);
    }
    int64_t slot_number() const { return GetField<int64_t>(VT_SLOT_NUMBER, 0); }
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) &&
               VerifyOffset(verifier, VT_OPERATION_ARGS) &&
               verifier.VerifyTable(operation_args()) &&
               VerifyField<int64_t>(verifier, VT_SLOT_NUMBER) &&
               verifier.EndTable();
    }
};

struct ReplicaProposeArgsBuilder {
    typedef ReplicaProposeArgs Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_operation_args(
        flatbuffers::Offset<paxos_sgx::crash::OperationArgs> operation_args) {
        fbb_.AddOffset(ReplicaProposeArgs::VT_OPERATION_ARGS, operation_args);
    }
    void add_slot_number(int64_t slot_number) {
        fbb_.AddElement<int64_t>(ReplicaProposeArgs::VT_SLOT_NUMBER,
                                 slot_number, 0);
    }
    explicit ReplicaProposeArgsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    ReplicaProposeArgsBuilder &operator=(const ReplicaProposeArgsBuilder &);
    flatbuffers::Offset<ReplicaProposeArgs> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<ReplicaProposeArgs>(end);
        return o;
    }
};

inline flatbuffers::Offset<ReplicaProposeArgs> CreateReplicaProposeArgs(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<paxos_sgx::crash::OperationArgs> operation_args = 0,
    int64_t slot_number = 0) {
    ReplicaProposeArgsBuilder builder_(_fbb);
    builder_.add_slot_number(slot_number);
    builder_.add_operation_args(operation_args);
    return builder_.Finish();
}

struct ReplicaAcceptArgs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    typedef ReplicaAcceptArgsBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
        VT_SLOT_NUMBER = 4
    };
    int64_t slot_number() const { return GetField<int64_t>(VT_SLOT_NUMBER, 0); }
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) &&
               VerifyField<int64_t>(verifier, VT_SLOT_NUMBER) &&
               verifier.EndTable();
    }
};

struct ReplicaAcceptArgsBuilder {
    typedef ReplicaAcceptArgs Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_slot_number(int64_t slot_number) {
        fbb_.AddElement<int64_t>(ReplicaAcceptArgs::VT_SLOT_NUMBER, slot_number,
                                 0);
    }
    explicit ReplicaAcceptArgsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    ReplicaAcceptArgsBuilder &operator=(const ReplicaAcceptArgsBuilder &);
    flatbuffers::Offset<ReplicaAcceptArgs> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<ReplicaAcceptArgs>(end);
        return o;
    }
};

inline flatbuffers::Offset<ReplicaAcceptArgs> CreateReplicaAcceptArgs(
    flatbuffers::FlatBufferBuilder &_fbb, int64_t slot_number = 0) {
    ReplicaAcceptArgsBuilder builder_(_fbb);
    builder_.add_slot_number(slot_number);
    return builder_.Finish();
}

struct PingArgs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    typedef PingArgsBuilder Builder;
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) && verifier.EndTable();
    }
};

struct PingArgsBuilder {
    typedef PingArgs Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    explicit PingArgsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    PingArgsBuilder &operator=(const PingArgsBuilder &);
    flatbuffers::Offset<PingArgs> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<PingArgs>(end);
        return o;
    }
};

inline flatbuffers::Offset<PingArgs> CreatePingArgs(
    flatbuffers::FlatBufferBuilder &_fbb) {
    PingArgsBuilder builder_(_fbb);
    return builder_.Finish();
}

struct CloseArgs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    typedef CloseArgsBuilder Builder;
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) && verifier.EndTable();
    }
};

struct CloseArgsBuilder {
    typedef CloseArgs Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    explicit CloseArgsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    CloseArgsBuilder &operator=(const CloseArgsBuilder &);
    flatbuffers::Offset<CloseArgs> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<CloseArgs>(end);
        return o;
    }
};

inline flatbuffers::Offset<CloseArgs> CreateCloseArgs(
    flatbuffers::FlatBufferBuilder &_fbb) {
    CloseArgsBuilder builder_(_fbb);
    return builder_.Finish();
}

struct ResetArgs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    typedef ResetArgsBuilder Builder;
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) && verifier.EndTable();
    }
};

struct ResetArgsBuilder {
    typedef ResetArgs Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    explicit ResetArgsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    ResetArgsBuilder &operator=(const ResetArgsBuilder &);
    flatbuffers::Offset<ResetArgs> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<ResetArgs>(end);
        return o;
    }
};

inline flatbuffers::Offset<ResetArgs> CreateResetArgs(
    flatbuffers::FlatBufferBuilder &_fbb) {
    ResetArgsBuilder builder_(_fbb);
    return builder_.Finish();
}

struct BasicRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    typedef BasicRequestBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
        VT_TYPE = 4,
        VT_TICKET = 6,
        VT_ARGS_TYPE = 8,
        VT_ARGS = 10
    };
    paxos_sgx::crash::ReqType type() const {
        return static_cast<paxos_sgx::crash::ReqType>(
            GetField<int8_t>(VT_TYPE, 0));
    }
    int64_t ticket() const { return GetField<int64_t>(VT_TICKET, 0); }
    paxos_sgx::crash::ReqArgs args_type() const {
        return static_cast<paxos_sgx::crash::ReqArgs>(
            GetField<uint8_t>(VT_ARGS_TYPE, 0));
    }
    const void *args() const { return GetPointer<const void *>(VT_ARGS); }
    template <typename T>
    const T *args_as() const;
    const paxos_sgx::crash::ClientFastGetArgs *args_as_ClientFastGetArgs()
        const {
        return args_type() == paxos_sgx::crash::ReqArgs_ClientFastGetArgs
                   ? static_cast<const paxos_sgx::crash::ClientFastGetArgs *>(
                         args())
                   : nullptr;
    }
    const paxos_sgx::crash::OperationArgs *args_as_OperationArgs() const {
        return args_type() == paxos_sgx::crash::ReqArgs_OperationArgs
                   ? static_cast<const paxos_sgx::crash::OperationArgs *>(
                         args())
                   : nullptr;
    }
    const paxos_sgx::crash::ReplicaFastGetArgs *args_as_ReplicaFastGetArgs()
        const {
        return args_type() == paxos_sgx::crash::ReqArgs_ReplicaFastGetArgs
                   ? static_cast<const paxos_sgx::crash::ReplicaFastGetArgs *>(
                         args())
                   : nullptr;
    }
    const paxos_sgx::crash::ReplicaProposeArgs *args_as_ReplicaProposeArgs()
        const {
        return args_type() == paxos_sgx::crash::ReqArgs_ReplicaProposeArgs
                   ? static_cast<const paxos_sgx::crash::ReplicaProposeArgs *>(
                         args())
                   : nullptr;
    }
    const paxos_sgx::crash::ReplicaAcceptArgs *args_as_ReplicaAcceptArgs()
        const {
        return args_type() == paxos_sgx::crash::ReqArgs_ReplicaAcceptArgs
                   ? static_cast<const paxos_sgx::crash::ReplicaAcceptArgs *>(
                         args())
                   : nullptr;
    }
    const paxos_sgx::crash::PingArgs *args_as_PingArgs() const {
        return args_type() == paxos_sgx::crash::ReqArgs_PingArgs
                   ? static_cast<const paxos_sgx::crash::PingArgs *>(args())
                   : nullptr;
    }
    const paxos_sgx::crash::CloseArgs *args_as_CloseArgs() const {
        return args_type() == paxos_sgx::crash::ReqArgs_CloseArgs
                   ? static_cast<const paxos_sgx::crash::CloseArgs *>(args())
                   : nullptr;
    }
    const paxos_sgx::crash::ResetArgs *args_as_ResetArgs() const {
        return args_type() == paxos_sgx::crash::ReqArgs_ResetArgs
                   ? static_cast<const paxos_sgx::crash::ResetArgs *>(args())
                   : nullptr;
    }
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) &&
               VerifyField<int8_t>(verifier, VT_TYPE) &&
               VerifyField<int64_t>(verifier, VT_TICKET) &&
               VerifyField<uint8_t>(verifier, VT_ARGS_TYPE) &&
               VerifyOffset(verifier, VT_ARGS) &&
               VerifyReqArgs(verifier, args(), args_type()) &&
               verifier.EndTable();
    }
};

template <>
inline const paxos_sgx::crash::ClientFastGetArgs *
BasicRequest::args_as<paxos_sgx::crash::ClientFastGetArgs>() const {
    return args_as_ClientFastGetArgs();
}

template <>
inline const paxos_sgx::crash::OperationArgs *
BasicRequest::args_as<paxos_sgx::crash::OperationArgs>() const {
    return args_as_OperationArgs();
}

template <>
inline const paxos_sgx::crash::ReplicaFastGetArgs *
BasicRequest::args_as<paxos_sgx::crash::ReplicaFastGetArgs>() const {
    return args_as_ReplicaFastGetArgs();
}

template <>
inline const paxos_sgx::crash::ReplicaProposeArgs *
BasicRequest::args_as<paxos_sgx::crash::ReplicaProposeArgs>() const {
    return args_as_ReplicaProposeArgs();
}

template <>
inline const paxos_sgx::crash::ReplicaAcceptArgs *
BasicRequest::args_as<paxos_sgx::crash::ReplicaAcceptArgs>() const {
    return args_as_ReplicaAcceptArgs();
}

template <>
inline const paxos_sgx::crash::PingArgs *
BasicRequest::args_as<paxos_sgx::crash::PingArgs>() const {
    return args_as_PingArgs();
}

template <>
inline const paxos_sgx::crash::CloseArgs *
BasicRequest::args_as<paxos_sgx::crash::CloseArgs>() const {
    return args_as_CloseArgs();
}

template <>
inline const paxos_sgx::crash::ResetArgs *
BasicRequest::args_as<paxos_sgx::crash::ResetArgs>() const {
    return args_as_ResetArgs();
}

struct BasicRequestBuilder {
    typedef BasicRequest Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_type(paxos_sgx::crash::ReqType type) {
        fbb_.AddElement<int8_t>(BasicRequest::VT_TYPE,
                                static_cast<int8_t>(type), 0);
    }
    void add_ticket(int64_t ticket) {
        fbb_.AddElement<int64_t>(BasicRequest::VT_TICKET, ticket, 0);
    }
    void add_args_type(paxos_sgx::crash::ReqArgs args_type) {
        fbb_.AddElement<uint8_t>(BasicRequest::VT_ARGS_TYPE,
                                 static_cast<uint8_t>(args_type), 0);
    }
    void add_args(flatbuffers::Offset<void> args) {
        fbb_.AddOffset(BasicRequest::VT_ARGS, args);
    }
    explicit BasicRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    BasicRequestBuilder &operator=(const BasicRequestBuilder &);
    flatbuffers::Offset<BasicRequest> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<BasicRequest>(end);
        return o;
    }
};

inline flatbuffers::Offset<BasicRequest> CreateBasicRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    paxos_sgx::crash::ReqType type = paxos_sgx::crash::ReqType_client_fast_get,
    int64_t ticket = 0,
    paxos_sgx::crash::ReqArgs args_type = paxos_sgx::crash::ReqArgs_NONE,
    flatbuffers::Offset<void> args = 0) {
    BasicRequestBuilder builder_(_fbb);
    builder_.add_ticket(ticket);
    builder_.add_args(args);
    builder_.add_args_type(args_type);
    builder_.add_type(type);
    return builder_.Finish();
}

inline bool VerifyReqArgs(flatbuffers::Verifier &verifier, const void *obj,
                          ReqArgs type) {
    switch (type) {
        case ReqArgs_NONE: {
            return true;
        }
        case ReqArgs_ClientFastGetArgs: {
            auto ptr =
                reinterpret_cast<const paxos_sgx::crash::ClientFastGetArgs *>(
                    obj);
            return verifier.VerifyTable(ptr);
        }
        case ReqArgs_OperationArgs: {
            auto ptr =
                reinterpret_cast<const paxos_sgx::crash::OperationArgs *>(obj);
            return verifier.VerifyTable(ptr);
        }
        case ReqArgs_ReplicaFastGetArgs: {
            auto ptr =
                reinterpret_cast<const paxos_sgx::crash::ReplicaFastGetArgs *>(
                    obj);
            return verifier.VerifyTable(ptr);
        }
        case ReqArgs_ReplicaProposeArgs: {
            auto ptr =
                reinterpret_cast<const paxos_sgx::crash::ReplicaProposeArgs *>(
                    obj);
            return verifier.VerifyTable(ptr);
        }
        case ReqArgs_ReplicaAcceptArgs: {
            auto ptr =
                reinterpret_cast<const paxos_sgx::crash::ReplicaAcceptArgs *>(
                    obj);
            return verifier.VerifyTable(ptr);
        }
        case ReqArgs_PingArgs: {
            auto ptr =
                reinterpret_cast<const paxos_sgx::crash::PingArgs *>(obj);
            return verifier.VerifyTable(ptr);
        }
        case ReqArgs_CloseArgs: {
            auto ptr =
                reinterpret_cast<const paxos_sgx::crash::CloseArgs *>(obj);
            return verifier.VerifyTable(ptr);
        }
        case ReqArgs_ResetArgs: {
            auto ptr =
                reinterpret_cast<const paxos_sgx::crash::ResetArgs *>(obj);
            return verifier.VerifyTable(ptr);
        }
        default:
            return true;
    }
}

inline bool VerifyReqArgsVector(
    flatbuffers::Verifier &verifier,
    const flatbuffers::Vector<flatbuffers::Offset<void>> *values,
    const flatbuffers::Vector<uint8_t> *types) {
    if (!values || !types) return !values && !types;
    if (values->size() != types->size()) return false;
    for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
        if (!VerifyReqArgs(verifier, values->Get(i),
                           types->GetEnum<ReqArgs>(i))) {
            return false;
        }
    }
    return true;
}

inline const paxos_sgx::crash::BasicRequest *GetBasicRequest(const void *buf) {
    return flatbuffers::GetRoot<paxos_sgx::crash::BasicRequest>(buf);
}

inline const paxos_sgx::crash::BasicRequest *GetSizePrefixedBasicRequest(
    const void *buf) {
    return flatbuffers::GetSizePrefixedRoot<paxos_sgx::crash::BasicRequest>(
        buf);
}

inline bool VerifyBasicRequestBuffer(flatbuffers::Verifier &verifier) {
    return verifier.VerifyBuffer<paxos_sgx::crash::BasicRequest>(nullptr);
}

inline bool VerifySizePrefixedBasicRequestBuffer(
    flatbuffers::Verifier &verifier) {
    return verifier.VerifySizePrefixedBuffer<paxos_sgx::crash::BasicRequest>(
        nullptr);
}

inline void FinishBasicRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<paxos_sgx::crash::BasicRequest> root) {
    fbb.Finish(root);
}

inline void FinishSizePrefixedBasicRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<paxos_sgx::crash::BasicRequest> root) {
    fbb.FinishSizePrefixed(root);
}

}  // namespace crash
}  // namespace paxos_sgx

#endif  // FLATBUFFERS_GENERATED_CRASHREQ_PAXOS_SGX_CRASH_H_
