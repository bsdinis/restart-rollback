// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CRASHRESP_PAXOS_SGX_CRASH_H_
#define FLATBUFFERS_GENERATED_CRASHRESP_PAXOS_SGX_CRASH_H_

#include "flatbuffers/flatbuffers.h"

#include "crash_generated.h"

namespace paxos_sgx {
namespace crash {

struct ClientFastGetResult;
struct ClientFastGetResultBuilder;

struct ClientOperationResult;
struct ClientOperationResultBuilder;

struct ReplicaFastGetResult;
struct ReplicaFastGetResultBuilder;

struct ReplicaProposeResult;
struct ReplicaProposeResultBuilder;

struct ReplicaAcceptResult;
struct ReplicaAcceptResultBuilder;

struct PingResult;
struct PingResultBuilder;

struct BasicResponse;
struct BasicResponseBuilder;

enum Result {
    Result_NONE = 0,
    Result_ClientFastGetResult = 1,
    Result_ClientOperationResult = 2,
    Result_ReplicaFastGetResult = 3,
    Result_ReplicaProposeResult = 4,
    Result_ReplicaAcceptResult = 5,
    Result_PingResult = 6,
    Result_MIN = Result_NONE,
    Result_MAX = Result_PingResult
};

inline const Result (&EnumValuesResult())[7] {
    static const Result values[] = {Result_NONE,
                                    Result_ClientFastGetResult,
                                    Result_ClientOperationResult,
                                    Result_ReplicaFastGetResult,
                                    Result_ReplicaProposeResult,
                                    Result_ReplicaAcceptResult,
                                    Result_PingResult};
    return values;
}

inline const char *const *EnumNamesResult() {
    static const char *const names[8] = {"NONE",
                                         "ClientFastGetResult",
                                         "ClientOperationResult",
                                         "ReplicaFastGetResult",
                                         "ReplicaProposeResult",
                                         "ReplicaAcceptResult",
                                         "PingResult",
                                         nullptr};
    return names;
}

inline const char *EnumNameResult(Result e) {
    if (flatbuffers::IsOutRange(e, Result_NONE, Result_PingResult)) return "";
    const size_t index = static_cast<size_t>(e);
    return EnumNamesResult()[index];
}

template <typename T>
struct ResultTraits {
    static const Result enum_value = Result_NONE;
};

template <>
struct ResultTraits<paxos_sgx::crash::ClientFastGetResult> {
    static const Result enum_value = Result_ClientFastGetResult;
};

template <>
struct ResultTraits<paxos_sgx::crash::ClientOperationResult> {
    static const Result enum_value = Result_ClientOperationResult;
};

template <>
struct ResultTraits<paxos_sgx::crash::ReplicaFastGetResult> {
    static const Result enum_value = Result_ReplicaFastGetResult;
};

template <>
struct ResultTraits<paxos_sgx::crash::ReplicaProposeResult> {
    static const Result enum_value = Result_ReplicaProposeResult;
};

template <>
struct ResultTraits<paxos_sgx::crash::ReplicaAcceptResult> {
    static const Result enum_value = Result_ReplicaAcceptResult;
};

template <>
struct ResultTraits<paxos_sgx::crash::PingResult> {
    static const Result enum_value = Result_PingResult;
};

bool VerifyResult(flatbuffers::Verifier &verifier, const void *obj,
                  Result type);
bool VerifyResultVector(
    flatbuffers::Verifier &verifier,
    const flatbuffers::Vector<flatbuffers::Offset<void>> *values,
    const flatbuffers::Vector<uint8_t> *types);

struct ClientFastGetResult FLATBUFFERS_FINAL_CLASS
    : private flatbuffers::Table {
    typedef ClientFastGetResultBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
        VT_ACCOUNT = 4,
        VT_AMOUNT = 6,
        VT_SUCCESS = 8
    };
    int64_t account() const { return GetField<int64_t>(VT_ACCOUNT, 0); }
    int64_t amount() const { return GetField<int64_t>(VT_AMOUNT, 0); }
    bool success() const { return GetField<uint8_t>(VT_SUCCESS, 0) != 0; }
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) &&
               VerifyField<int64_t>(verifier, VT_ACCOUNT) &&
               VerifyField<int64_t>(verifier, VT_AMOUNT) &&
               VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
               verifier.EndTable();
    }
};

struct ClientFastGetResultBuilder {
    typedef ClientFastGetResult Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_account(int64_t account) {
        fbb_.AddElement<int64_t>(ClientFastGetResult::VT_ACCOUNT, account, 0);
    }
    void add_amount(int64_t amount) {
        fbb_.AddElement<int64_t>(ClientFastGetResult::VT_AMOUNT, amount, 0);
    }
    void add_success(bool success) {
        fbb_.AddElement<uint8_t>(ClientFastGetResult::VT_SUCCESS,
                                 static_cast<uint8_t>(success), 0);
    }
    explicit ClientFastGetResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    ClientFastGetResultBuilder &operator=(const ClientFastGetResultBuilder &);
    flatbuffers::Offset<ClientFastGetResult> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<ClientFastGetResult>(end);
        return o;
    }
};

inline flatbuffers::Offset<ClientFastGetResult> CreateClientFastGetResult(
    flatbuffers::FlatBufferBuilder &_fbb, int64_t account = 0,
    int64_t amount = 0, bool success = false) {
    ClientFastGetResultBuilder builder_(_fbb);
    builder_.add_amount(amount);
    builder_.add_account(account);
    builder_.add_success(success);
    return builder_.Finish();
}

struct ClientOperationResult FLATBUFFERS_FINAL_CLASS
    : private flatbuffers::Table {
    typedef ClientOperationResultBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
        VT_ACCOUNT = 4,
        VT_AMOUNT = 6,
        VT_SUCCESS = 8
    };
    int64_t account() const { return GetField<int64_t>(VT_ACCOUNT, 0); }
    int64_t amount() const { return GetField<int64_t>(VT_AMOUNT, 0); }
    bool success() const { return GetField<uint8_t>(VT_SUCCESS, 0) != 0; }
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) &&
               VerifyField<int64_t>(verifier, VT_ACCOUNT) &&
               VerifyField<int64_t>(verifier, VT_AMOUNT) &&
               VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
               verifier.EndTable();
    }
};

struct ClientOperationResultBuilder {
    typedef ClientOperationResult Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_account(int64_t account) {
        fbb_.AddElement<int64_t>(ClientOperationResult::VT_ACCOUNT, account, 0);
    }
    void add_amount(int64_t amount) {
        fbb_.AddElement<int64_t>(ClientOperationResult::VT_AMOUNT, amount, 0);
    }
    void add_success(bool success) {
        fbb_.AddElement<uint8_t>(ClientOperationResult::VT_SUCCESS,
                                 static_cast<uint8_t>(success), 0);
    }
    explicit ClientOperationResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    ClientOperationResultBuilder &operator=(
        const ClientOperationResultBuilder &);
    flatbuffers::Offset<ClientOperationResult> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<ClientOperationResult>(end);
        return o;
    }
};

inline flatbuffers::Offset<ClientOperationResult> CreateClientOperationResult(
    flatbuffers::FlatBufferBuilder &_fbb, int64_t account = 0,
    int64_t amount = 0, bool success = false) {
    ClientOperationResultBuilder builder_(_fbb);
    builder_.add_amount(amount);
    builder_.add_account(account);
    builder_.add_success(success);
    return builder_.Finish();
}

struct ReplicaFastGetResult FLATBUFFERS_FINAL_CLASS
    : private flatbuffers::Table {
    typedef ReplicaFastGetResultBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
        VT_SUCCESS = 4,
        VT_ACCOUNT = 6,
        VT_AMOUNT = 8,
        VT_LAST_APPLIED = 10
    };
    bool success() const { return GetField<uint8_t>(VT_SUCCESS, 0) != 0; }
    int64_t account() const { return GetField<int64_t>(VT_ACCOUNT, 0); }
    int64_t amount() const { return GetField<int64_t>(VT_AMOUNT, 0); }
    int64_t last_applied() const {
        return GetField<int64_t>(VT_LAST_APPLIED, 0);
    }
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) &&
               VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
               VerifyField<int64_t>(verifier, VT_ACCOUNT) &&
               VerifyField<int64_t>(verifier, VT_AMOUNT) &&
               VerifyField<int64_t>(verifier, VT_LAST_APPLIED) &&
               verifier.EndTable();
    }
};

struct ReplicaFastGetResultBuilder {
    typedef ReplicaFastGetResult Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_success(bool success) {
        fbb_.AddElement<uint8_t>(ReplicaFastGetResult::VT_SUCCESS,
                                 static_cast<uint8_t>(success), 0);
    }
    void add_account(int64_t account) {
        fbb_.AddElement<int64_t>(ReplicaFastGetResult::VT_ACCOUNT, account, 0);
    }
    void add_amount(int64_t amount) {
        fbb_.AddElement<int64_t>(ReplicaFastGetResult::VT_AMOUNT, amount, 0);
    }
    void add_last_applied(int64_t last_applied) {
        fbb_.AddElement<int64_t>(ReplicaFastGetResult::VT_LAST_APPLIED,
                                 last_applied, 0);
    }
    explicit ReplicaFastGetResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    ReplicaFastGetResultBuilder &operator=(const ReplicaFastGetResultBuilder &);
    flatbuffers::Offset<ReplicaFastGetResult> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<ReplicaFastGetResult>(end);
        return o;
    }
};

inline flatbuffers::Offset<ReplicaFastGetResult> CreateReplicaFastGetResult(
    flatbuffers::FlatBufferBuilder &_fbb, bool success = false,
    int64_t account = 0, int64_t amount = 0, int64_t last_applied = 0) {
    ReplicaFastGetResultBuilder builder_(_fbb);
    builder_.add_last_applied(last_applied);
    builder_.add_amount(amount);
    builder_.add_account(account);
    builder_.add_success(success);
    return builder_.Finish();
}

struct ReplicaProposeResult FLATBUFFERS_FINAL_CLASS
    : private flatbuffers::Table {
    typedef ReplicaProposeResultBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
        VT_SUCCESS = 4
    };
    bool success() const { return GetField<uint8_t>(VT_SUCCESS, 0) != 0; }
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) &&
               VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
               verifier.EndTable();
    }
};

struct ReplicaProposeResultBuilder {
    typedef ReplicaProposeResult Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_success(bool success) {
        fbb_.AddElement<uint8_t>(ReplicaProposeResult::VT_SUCCESS,
                                 static_cast<uint8_t>(success), 0);
    }
    explicit ReplicaProposeResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    ReplicaProposeResultBuilder &operator=(const ReplicaProposeResultBuilder &);
    flatbuffers::Offset<ReplicaProposeResult> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<ReplicaProposeResult>(end);
        return o;
    }
};

inline flatbuffers::Offset<ReplicaProposeResult> CreateReplicaProposeResult(
    flatbuffers::FlatBufferBuilder &_fbb, bool success = false) {
    ReplicaProposeResultBuilder builder_(_fbb);
    builder_.add_success(success);
    return builder_.Finish();
}

struct ReplicaAcceptResult FLATBUFFERS_FINAL_CLASS
    : private flatbuffers::Table {
    typedef ReplicaAcceptResultBuilder Builder;
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) && verifier.EndTable();
    }
};

struct ReplicaAcceptResultBuilder {
    typedef ReplicaAcceptResult Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    explicit ReplicaAcceptResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    ReplicaAcceptResultBuilder &operator=(const ReplicaAcceptResultBuilder &);
    flatbuffers::Offset<ReplicaAcceptResult> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<ReplicaAcceptResult>(end);
        return o;
    }
};

inline flatbuffers::Offset<ReplicaAcceptResult> CreateReplicaAcceptResult(
    flatbuffers::FlatBufferBuilder &_fbb) {
    ReplicaAcceptResultBuilder builder_(_fbb);
    return builder_.Finish();
}

struct PingResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    typedef PingResultBuilder Builder;
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) && verifier.EndTable();
    }
};

struct PingResultBuilder {
    typedef PingResult Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    explicit PingResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    PingResultBuilder &operator=(const PingResultBuilder &);
    flatbuffers::Offset<PingResult> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<PingResult>(end);
        return o;
    }
};

inline flatbuffers::Offset<PingResult> CreatePingResult(
    flatbuffers::FlatBufferBuilder &_fbb) {
    PingResultBuilder builder_(_fbb);
    return builder_.Finish();
}

struct BasicResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    typedef BasicResponseBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
        VT_TYPE = 4,
        VT_TICKET = 6,
        VT_RESULT_TYPE = 8,
        VT_RESULT = 10
    };
    paxos_sgx::crash::ReqType type() const {
        return static_cast<paxos_sgx::crash::ReqType>(
            GetField<int8_t>(VT_TYPE, 0));
    }
    int64_t ticket() const { return GetField<int64_t>(VT_TICKET, 0); }
    paxos_sgx::crash::Result result_type() const {
        return static_cast<paxos_sgx::crash::Result>(
            GetField<uint8_t>(VT_RESULT_TYPE, 0));
    }
    const void *result() const { return GetPointer<const void *>(VT_RESULT); }
    template <typename T>
    const T *result_as() const;
    const paxos_sgx::crash::ClientFastGetResult *result_as_ClientFastGetResult()
        const {
        return result_type() == paxos_sgx::crash::Result_ClientFastGetResult
                   ? static_cast<const paxos_sgx::crash::ClientFastGetResult *>(
                         result())
                   : nullptr;
    }
    const paxos_sgx::crash::ClientOperationResult *
    result_as_ClientOperationResult() const {
        return result_type() == paxos_sgx::crash::Result_ClientOperationResult
                   ? static_cast<
                         const paxos_sgx::crash::ClientOperationResult *>(
                         result())
                   : nullptr;
    }
    const paxos_sgx::crash::ReplicaFastGetResult *
    result_as_ReplicaFastGetResult() const {
        return result_type() == paxos_sgx::crash::Result_ReplicaFastGetResult
                   ? static_cast<
                         const paxos_sgx::crash::ReplicaFastGetResult *>(
                         result())
                   : nullptr;
    }
    const paxos_sgx::crash::ReplicaProposeResult *
    result_as_ReplicaProposeResult() const {
        return result_type() == paxos_sgx::crash::Result_ReplicaProposeResult
                   ? static_cast<
                         const paxos_sgx::crash::ReplicaProposeResult *>(
                         result())
                   : nullptr;
    }
    const paxos_sgx::crash::ReplicaAcceptResult *result_as_ReplicaAcceptResult()
        const {
        return result_type() == paxos_sgx::crash::Result_ReplicaAcceptResult
                   ? static_cast<const paxos_sgx::crash::ReplicaAcceptResult *>(
                         result())
                   : nullptr;
    }
    const paxos_sgx::crash::PingResult *result_as_PingResult() const {
        return result_type() == paxos_sgx::crash::Result_PingResult
                   ? static_cast<const paxos_sgx::crash::PingResult *>(result())
                   : nullptr;
    }
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) &&
               VerifyField<int8_t>(verifier, VT_TYPE) &&
               VerifyField<int64_t>(verifier, VT_TICKET) &&
               VerifyField<uint8_t>(verifier, VT_RESULT_TYPE) &&
               VerifyOffset(verifier, VT_RESULT) &&
               VerifyResult(verifier, result(), result_type()) &&
               verifier.EndTable();
    }
};

template <>
inline const paxos_sgx::crash::ClientFastGetResult *
BasicResponse::result_as<paxos_sgx::crash::ClientFastGetResult>() const {
    return result_as_ClientFastGetResult();
}

template <>
inline const paxos_sgx::crash::ClientOperationResult *
BasicResponse::result_as<paxos_sgx::crash::ClientOperationResult>() const {
    return result_as_ClientOperationResult();
}

template <>
inline const paxos_sgx::crash::ReplicaFastGetResult *
BasicResponse::result_as<paxos_sgx::crash::ReplicaFastGetResult>() const {
    return result_as_ReplicaFastGetResult();
}

template <>
inline const paxos_sgx::crash::ReplicaProposeResult *
BasicResponse::result_as<paxos_sgx::crash::ReplicaProposeResult>() const {
    return result_as_ReplicaProposeResult();
}

template <>
inline const paxos_sgx::crash::ReplicaAcceptResult *
BasicResponse::result_as<paxos_sgx::crash::ReplicaAcceptResult>() const {
    return result_as_ReplicaAcceptResult();
}

template <>
inline const paxos_sgx::crash::PingResult *
BasicResponse::result_as<paxos_sgx::crash::PingResult>() const {
    return result_as_PingResult();
}

struct BasicResponseBuilder {
    typedef BasicResponse Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_type(paxos_sgx::crash::ReqType type) {
        fbb_.AddElement<int8_t>(BasicResponse::VT_TYPE,
                                static_cast<int8_t>(type), 0);
    }
    void add_ticket(int64_t ticket) {
        fbb_.AddElement<int64_t>(BasicResponse::VT_TICKET, ticket, 0);
    }
    void add_result_type(paxos_sgx::crash::Result result_type) {
        fbb_.AddElement<uint8_t>(BasicResponse::VT_RESULT_TYPE,
                                 static_cast<uint8_t>(result_type), 0);
    }
    void add_result(flatbuffers::Offset<void> result) {
        fbb_.AddOffset(BasicResponse::VT_RESULT, result);
    }
    explicit BasicResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    BasicResponseBuilder &operator=(const BasicResponseBuilder &);
    flatbuffers::Offset<BasicResponse> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<BasicResponse>(end);
        return o;
    }
};

inline flatbuffers::Offset<BasicResponse> CreateBasicResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    paxos_sgx::crash::ReqType type = paxos_sgx::crash::ReqType_client_fast_get,
    int64_t ticket = 0,
    paxos_sgx::crash::Result result_type = paxos_sgx::crash::Result_NONE,
    flatbuffers::Offset<void> result = 0) {
    BasicResponseBuilder builder_(_fbb);
    builder_.add_ticket(ticket);
    builder_.add_result(result);
    builder_.add_result_type(result_type);
    builder_.add_type(type);
    return builder_.Finish();
}

inline bool VerifyResult(flatbuffers::Verifier &verifier, const void *obj,
                         Result type) {
    switch (type) {
        case Result_NONE: {
            return true;
        }
        case Result_ClientFastGetResult: {
            auto ptr =
                reinterpret_cast<const paxos_sgx::crash::ClientFastGetResult *>(
                    obj);
            return verifier.VerifyTable(ptr);
        }
        case Result_ClientOperationResult: {
            auto ptr = reinterpret_cast<
                const paxos_sgx::crash::ClientOperationResult *>(obj);
            return verifier.VerifyTable(ptr);
        }
        case Result_ReplicaFastGetResult: {
            auto ptr = reinterpret_cast<
                const paxos_sgx::crash::ReplicaFastGetResult *>(obj);
            return verifier.VerifyTable(ptr);
        }
        case Result_ReplicaProposeResult: {
            auto ptr = reinterpret_cast<
                const paxos_sgx::crash::ReplicaProposeResult *>(obj);
            return verifier.VerifyTable(ptr);
        }
        case Result_ReplicaAcceptResult: {
            auto ptr =
                reinterpret_cast<const paxos_sgx::crash::ReplicaAcceptResult *>(
                    obj);
            return verifier.VerifyTable(ptr);
        }
        case Result_PingResult: {
            auto ptr =
                reinterpret_cast<const paxos_sgx::crash::PingResult *>(obj);
            return verifier.VerifyTable(ptr);
        }
        default:
            return true;
    }
}

inline bool VerifyResultVector(
    flatbuffers::Verifier &verifier,
    const flatbuffers::Vector<flatbuffers::Offset<void>> *values,
    const flatbuffers::Vector<uint8_t> *types) {
    if (!values || !types) return !values && !types;
    if (values->size() != types->size()) return false;
    for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
        if (!VerifyResult(verifier, values->Get(i),
                          types->GetEnum<Result>(i))) {
            return false;
        }
    }
    return true;
}

inline const paxos_sgx::crash::BasicResponse *GetBasicResponse(
    const void *buf) {
    return flatbuffers::GetRoot<paxos_sgx::crash::BasicResponse>(buf);
}

inline const paxos_sgx::crash::BasicResponse *GetSizePrefixedBasicResponse(
    const void *buf) {
    return flatbuffers::GetSizePrefixedRoot<paxos_sgx::crash::BasicResponse>(
        buf);
}

inline bool VerifyBasicResponseBuffer(flatbuffers::Verifier &verifier) {
    return verifier.VerifyBuffer<paxos_sgx::crash::BasicResponse>(nullptr);
}

inline bool VerifySizePrefixedBasicResponseBuffer(
    flatbuffers::Verifier &verifier) {
    return verifier.VerifySizePrefixedBuffer<paxos_sgx::crash::BasicResponse>(
        nullptr);
}

inline void FinishBasicResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<paxos_sgx::crash::BasicResponse> root) {
    fbb.Finish(root);
}

inline void FinishSizePrefixedBasicResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<paxos_sgx::crash::BasicResponse> root) {
    fbb.FinishSizePrefixed(root);
}

}  // namespace crash
}  // namespace paxos_sgx

#endif  // FLATBUFFERS_GENERATED_CRASHRESP_PAXOS_SGX_CRASH_H_
