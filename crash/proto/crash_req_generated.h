// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CRASHREQ_PAXOS_SGX_CRASH_H_
#define FLATBUFFERS_GENERATED_CRASHREQ_PAXOS_SGX_CRASH_H_

#include "flatbuffers/flatbuffers.h"

#include "crash_generated.h"

namespace paxos_sgx {
namespace crash {

struct TransferArgs;
struct TransferArgsBuilder;

struct ClientGetArgs;
struct ClientGetArgsBuilder;

struct ReplicaGetArgs;
struct ReplicaGetArgsBuilder;

struct PingArgs;
struct PingArgsBuilder;

struct CloseArgs;
struct CloseArgsBuilder;

struct BasicRequest;
struct BasicRequestBuilder;

enum ReqArgs {
  ReqArgs_NONE = 0,
  ReqArgs_TransferArgs = 1,
  ReqArgs_ClientGetArgs = 2,
  ReqArgs_ReplicaGetArgs = 3,
  ReqArgs_PingArgs = 4,
  ReqArgs_CloseArgs = 5,
  ReqArgs_MIN = ReqArgs_NONE,
  ReqArgs_MAX = ReqArgs_CloseArgs
};

inline const ReqArgs (&EnumValuesReqArgs())[6] {
  static const ReqArgs values[] = {
    ReqArgs_NONE,
    ReqArgs_TransferArgs,
    ReqArgs_ClientGetArgs,
    ReqArgs_ReplicaGetArgs,
    ReqArgs_PingArgs,
    ReqArgs_CloseArgs
  };
  return values;
}

inline const char * const *EnumNamesReqArgs() {
  static const char * const names[7] = {
    "NONE",
    "TransferArgs",
    "ClientGetArgs",
    "ReplicaGetArgs",
    "PingArgs",
    "CloseArgs",
    nullptr
  };
  return names;
}

inline const char *EnumNameReqArgs(ReqArgs e) {
  if (flatbuffers::IsOutRange(e, ReqArgs_NONE, ReqArgs_CloseArgs)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesReqArgs()[index];
}

template<typename T> struct ReqArgsTraits {
  static const ReqArgs enum_value = ReqArgs_NONE;
};

template<> struct ReqArgsTraits<paxos_sgx::crash::TransferArgs> {
  static const ReqArgs enum_value = ReqArgs_TransferArgs;
};

template<> struct ReqArgsTraits<paxos_sgx::crash::ClientGetArgs> {
  static const ReqArgs enum_value = ReqArgs_ClientGetArgs;
};

template<> struct ReqArgsTraits<paxos_sgx::crash::ReplicaGetArgs> {
  static const ReqArgs enum_value = ReqArgs_ReplicaGetArgs;
};

template<> struct ReqArgsTraits<paxos_sgx::crash::PingArgs> {
  static const ReqArgs enum_value = ReqArgs_PingArgs;
};

template<> struct ReqArgsTraits<paxos_sgx::crash::CloseArgs> {
  static const ReqArgs enum_value = ReqArgs_CloseArgs;
};

bool VerifyReqArgs(flatbuffers::Verifier &verifier, const void *obj, ReqArgs type);
bool VerifyReqArgsVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct TransferArgs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TransferArgsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT = 4,
    VT_TO = 6,
    VT_AMOUNT = 8
  };
  int64_t account() const {
    return GetField<int64_t>(VT_ACCOUNT, 0);
  }
  int64_t to() const {
    return GetField<int64_t>(VT_TO, 0);
  }
  int64_t amount() const {
    return GetField<int64_t>(VT_AMOUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ACCOUNT) &&
           VerifyField<int64_t>(verifier, VT_TO) &&
           VerifyField<int64_t>(verifier, VT_AMOUNT) &&
           verifier.EndTable();
  }
};

struct TransferArgsBuilder {
  typedef TransferArgs Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_account(int64_t account) {
    fbb_.AddElement<int64_t>(TransferArgs::VT_ACCOUNT, account, 0);
  }
  void add_to(int64_t to) {
    fbb_.AddElement<int64_t>(TransferArgs::VT_TO, to, 0);
  }
  void add_amount(int64_t amount) {
    fbb_.AddElement<int64_t>(TransferArgs::VT_AMOUNT, amount, 0);
  }
  explicit TransferArgsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TransferArgsBuilder &operator=(const TransferArgsBuilder &);
  flatbuffers::Offset<TransferArgs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TransferArgs>(end);
    return o;
  }
};

inline flatbuffers::Offset<TransferArgs> CreateTransferArgs(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t account = 0,
    int64_t to = 0,
    int64_t amount = 0) {
  TransferArgsBuilder builder_(_fbb);
  builder_.add_amount(amount);
  builder_.add_to(to);
  builder_.add_account(account);
  return builder_.Finish();
}

struct ClientGetArgs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientGetArgsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT = 4
  };
  int64_t account() const {
    return GetField<int64_t>(VT_ACCOUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ACCOUNT) &&
           verifier.EndTable();
  }
};

struct ClientGetArgsBuilder {
  typedef ClientGetArgs Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_account(int64_t account) {
    fbb_.AddElement<int64_t>(ClientGetArgs::VT_ACCOUNT, account, 0);
  }
  explicit ClientGetArgsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ClientGetArgsBuilder &operator=(const ClientGetArgsBuilder &);
  flatbuffers::Offset<ClientGetArgs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ClientGetArgs>(end);
    return o;
  }
};

inline flatbuffers::Offset<ClientGetArgs> CreateClientGetArgs(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t account = 0) {
  ClientGetArgsBuilder builder_(_fbb);
  builder_.add_account(account);
  return builder_.Finish();
}

struct ReplicaGetArgs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReplicaGetArgsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT = 4
  };
  int64_t account() const {
    return GetField<int64_t>(VT_ACCOUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ACCOUNT) &&
           verifier.EndTable();
  }
};

struct ReplicaGetArgsBuilder {
  typedef ReplicaGetArgs Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_account(int64_t account) {
    fbb_.AddElement<int64_t>(ReplicaGetArgs::VT_ACCOUNT, account, 0);
  }
  explicit ReplicaGetArgsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ReplicaGetArgsBuilder &operator=(const ReplicaGetArgsBuilder &);
  flatbuffers::Offset<ReplicaGetArgs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ReplicaGetArgs>(end);
    return o;
  }
};

inline flatbuffers::Offset<ReplicaGetArgs> CreateReplicaGetArgs(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t account = 0) {
  ReplicaGetArgsBuilder builder_(_fbb);
  builder_.add_account(account);
  return builder_.Finish();
}

struct PingArgs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PingArgsBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PingArgsBuilder {
  typedef PingArgs Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit PingArgsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PingArgsBuilder &operator=(const PingArgsBuilder &);
  flatbuffers::Offset<PingArgs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PingArgs>(end);
    return o;
  }
};

inline flatbuffers::Offset<PingArgs> CreatePingArgs(
    flatbuffers::FlatBufferBuilder &_fbb) {
  PingArgsBuilder builder_(_fbb);
  return builder_.Finish();
}

struct CloseArgs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CloseArgsBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CloseArgsBuilder {
  typedef CloseArgs Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit CloseArgsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CloseArgsBuilder &operator=(const CloseArgsBuilder &);
  flatbuffers::Offset<CloseArgs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CloseArgs>(end);
    return o;
  }
};

inline flatbuffers::Offset<CloseArgs> CreateCloseArgs(
    flatbuffers::FlatBufferBuilder &_fbb) {
  CloseArgsBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BasicRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BasicRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_TICKET = 6,
    VT_ARGS_TYPE = 8,
    VT_ARGS = 10
  };
  paxos_sgx::crash::ReqType type() const {
    return static_cast<paxos_sgx::crash::ReqType>(GetField<int8_t>(VT_TYPE, 0));
  }
  int64_t ticket() const {
    return GetField<int64_t>(VT_TICKET, 0);
  }
  paxos_sgx::crash::ReqArgs args_type() const {
    return static_cast<paxos_sgx::crash::ReqArgs>(GetField<uint8_t>(VT_ARGS_TYPE, 0));
  }
  const void *args() const {
    return GetPointer<const void *>(VT_ARGS);
  }
  template<typename T> const T *args_as() const;
  const paxos_sgx::crash::TransferArgs *args_as_TransferArgs() const {
    return args_type() == paxos_sgx::crash::ReqArgs_TransferArgs ? static_cast<const paxos_sgx::crash::TransferArgs *>(args()) : nullptr;
  }
  const paxos_sgx::crash::ClientGetArgs *args_as_ClientGetArgs() const {
    return args_type() == paxos_sgx::crash::ReqArgs_ClientGetArgs ? static_cast<const paxos_sgx::crash::ClientGetArgs *>(args()) : nullptr;
  }
  const paxos_sgx::crash::ReplicaGetArgs *args_as_ReplicaGetArgs() const {
    return args_type() == paxos_sgx::crash::ReqArgs_ReplicaGetArgs ? static_cast<const paxos_sgx::crash::ReplicaGetArgs *>(args()) : nullptr;
  }
  const paxos_sgx::crash::PingArgs *args_as_PingArgs() const {
    return args_type() == paxos_sgx::crash::ReqArgs_PingArgs ? static_cast<const paxos_sgx::crash::PingArgs *>(args()) : nullptr;
  }
  const paxos_sgx::crash::CloseArgs *args_as_CloseArgs() const {
    return args_type() == paxos_sgx::crash::ReqArgs_CloseArgs ? static_cast<const paxos_sgx::crash::CloseArgs *>(args()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<int64_t>(verifier, VT_TICKET) &&
           VerifyField<uint8_t>(verifier, VT_ARGS_TYPE) &&
           VerifyOffset(verifier, VT_ARGS) &&
           VerifyReqArgs(verifier, args(), args_type()) &&
           verifier.EndTable();
  }
};

template<> inline const paxos_sgx::crash::TransferArgs *BasicRequest::args_as<paxos_sgx::crash::TransferArgs>() const {
  return args_as_TransferArgs();
}

template<> inline const paxos_sgx::crash::ClientGetArgs *BasicRequest::args_as<paxos_sgx::crash::ClientGetArgs>() const {
  return args_as_ClientGetArgs();
}

template<> inline const paxos_sgx::crash::ReplicaGetArgs *BasicRequest::args_as<paxos_sgx::crash::ReplicaGetArgs>() const {
  return args_as_ReplicaGetArgs();
}

template<> inline const paxos_sgx::crash::PingArgs *BasicRequest::args_as<paxos_sgx::crash::PingArgs>() const {
  return args_as_PingArgs();
}

template<> inline const paxos_sgx::crash::CloseArgs *BasicRequest::args_as<paxos_sgx::crash::CloseArgs>() const {
  return args_as_CloseArgs();
}

struct BasicRequestBuilder {
  typedef BasicRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(paxos_sgx::crash::ReqType type) {
    fbb_.AddElement<int8_t>(BasicRequest::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_ticket(int64_t ticket) {
    fbb_.AddElement<int64_t>(BasicRequest::VT_TICKET, ticket, 0);
  }
  void add_args_type(paxos_sgx::crash::ReqArgs args_type) {
    fbb_.AddElement<uint8_t>(BasicRequest::VT_ARGS_TYPE, static_cast<uint8_t>(args_type), 0);
  }
  void add_args(flatbuffers::Offset<void> args) {
    fbb_.AddOffset(BasicRequest::VT_ARGS, args);
  }
  explicit BasicRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BasicRequestBuilder &operator=(const BasicRequestBuilder &);
  flatbuffers::Offset<BasicRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BasicRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<BasicRequest> CreateBasicRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    paxos_sgx::crash::ReqType type = paxos_sgx::crash::ReqType_ping,
    int64_t ticket = 0,
    paxos_sgx::crash::ReqArgs args_type = paxos_sgx::crash::ReqArgs_NONE,
    flatbuffers::Offset<void> args = 0) {
  BasicRequestBuilder builder_(_fbb);
  builder_.add_ticket(ticket);
  builder_.add_args(args);
  builder_.add_args_type(args_type);
  builder_.add_type(type);
  return builder_.Finish();
}

inline bool VerifyReqArgs(flatbuffers::Verifier &verifier, const void *obj, ReqArgs type) {
  switch (type) {
    case ReqArgs_NONE: {
      return true;
    }
    case ReqArgs_TransferArgs: {
      auto ptr = reinterpret_cast<const paxos_sgx::crash::TransferArgs *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ReqArgs_ClientGetArgs: {
      auto ptr = reinterpret_cast<const paxos_sgx::crash::ClientGetArgs *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ReqArgs_ReplicaGetArgs: {
      auto ptr = reinterpret_cast<const paxos_sgx::crash::ReplicaGetArgs *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ReqArgs_PingArgs: {
      auto ptr = reinterpret_cast<const paxos_sgx::crash::PingArgs *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ReqArgs_CloseArgs: {
      auto ptr = reinterpret_cast<const paxos_sgx::crash::CloseArgs *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyReqArgsVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyReqArgs(
        verifier,  values->Get(i), types->GetEnum<ReqArgs>(i))) {
      return false;
    }
  }
  return true;
}

inline const paxos_sgx::crash::BasicRequest *GetBasicRequest(const void *buf) {
  return flatbuffers::GetRoot<paxos_sgx::crash::BasicRequest>(buf);
}

inline const paxos_sgx::crash::BasicRequest *GetSizePrefixedBasicRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<paxos_sgx::crash::BasicRequest>(buf);
}

inline bool VerifyBasicRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<paxos_sgx::crash::BasicRequest>(nullptr);
}

inline bool VerifySizePrefixedBasicRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<paxos_sgx::crash::BasicRequest>(nullptr);
}

inline void FinishBasicRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<paxos_sgx::crash::BasicRequest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBasicRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<paxos_sgx::crash::BasicRequest> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace crash
}  // namespace paxos_sgx

#endif  // FLATBUFFERS_GENERATED_CRASHREQ_PAXOS_SGX_CRASH_H_
