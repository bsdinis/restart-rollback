namespace teems;

enum MessageType:byte {
    client_greeting,

    proxy_get_req,
    proxy_get_resp,

    proxy_put_req,
    proxy_put_resp,

    get_req,
    get_resp,

    get_timestamp_req,
    get_timestamp_resp,

    change_policy_req,
    change_policy_resp,

    put_req,
    put_resp,

    ping_req,
    ping_resp,

    reset_req,
    reset_resp,

    smr_propose,
    smr_accept,
    smr_reject,

    stabilize_req,

    close_req,
}

struct Value {
    data: [ubyte:128];
}

struct Policy {
    policy_code: uint8;
    owner_id: int32;
    valid_from: int64;
}

table GetArgs {
    key: int64;
    retry: bool;
}

table GetResult {
    key : int64;
    retry: bool;
    value : Value;
    policy: Policy;
    policy_version: int64;
    timestamp: int64;
    stable: bool;
    suspicious: bool;
}

table GetTimestampArgs {
    key : int64;
    retry: bool;
}

table GetTimestampResult {
    key : int64;
    retry: bool;
    policy: Policy;
    policy_version: int64;
    timestamp: int64;
    suspicious: bool;
}

table ProxyGetArgs {
    key : int64;
    client_id: int32;
}
table ProxyPutArgs {
    key : int64;
    value : Value;
    client_id: int32;
}

table PutArgs {
    key : int64;
    value : Value;
    policy : Policy;
    policy_version: int64;
    timestamp: int64;
}

table PutResult {
    success : bool;
    policy_version: int64;
    timestamp: int64;
}

table ChangePolicyArgs {
    key : int64;
    policy_code: uint8;
    client_id: int32;
}
table ChangePolicyResult {
    key: int64;
    success: bool;
    policy_version: int64;
}

table SmrPropose {
    key: int64;
    policy_read: bool;
    policy: Policy;
    slot_number: int64;
    suspicious: bool;
}

table SmrAccept {
    slot_number: int64;
    suspicious: bool;
}

table SmrReject {
    slot_number: int64;
    suspicious: bool;
}


table StabilizeArgs {
    key : int64;
    policy_version: int64;
    timestamp: int64;
}

table Greeting {
    id: int32;
}

table Empty { }

union BasicMessage {
    ChangePolicyArgs,
    ChangePolicyResult,
    Greeting,
    GetArgs,
    GetResult,
    GetTimestampArgs,
    GetTimestampResult,
    ProxyGetArgs,
    ProxyPutArgs,
    PutArgs,
    PutResult,
    SmrPropose,
    SmrAccept,
    SmrReject,
    StabilizeArgs,
    Empty,
}

table Message {
    type    : MessageType;
    ticket  : int64;
    message : BasicMessage;
}

root_type Message;
